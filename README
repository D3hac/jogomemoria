### README

# Jogo da Memória de Trânsito

O Jogo da Memória de Trânsito é um aplicativo educacional desenvolvido em Flutter para ajudar os usuários a aprender e memorizar sinais de trânsito de maneira divertida e interativa. O jogo inclui autenticação de usuário e permite escolher entre três níveis de dificuldade.

## Funcionalidades

- **Autenticação de Utilizador**: Login com email e senha.
- **Níveis de Dificuldade**: Fácil, Médio e Difícil.
- **Pontuação e Progresso**: Armazenamento de pontuações usando `SharedPreferences`.

## Estrutura do Projeto

```
lib/
│
├── main.dart
├── home_screen.dart
├── auth_screen.dart
└── game_screen.dart
assets/
└── images/
    ├── sinal1.png
    ├── sinal2.png
    ├── sinal3.png
    └── sinal4.png
pubspec.yaml
```

## Instalação

### Pré-requisitos

- Flutter SDK: [Flutter Installation Guide](https://flutter.dev/docs/get-started/install)
- Dart SDK: Incluído no Flutter SDK

### Passos para Instalação

1. **Clone o Repositório**

   ```bash
   git clone https://github.com/seu-usuario/jogo-da-memoria-de-transito.git
   cd jogo-da-memoria-de-transito
   ```

2. **Instale as Dependências**

   ```bash
   flutter pub get
   ```

3. **Execute o Aplicativo**

   ```bash
   flutter run
   ```

## Estrutura dos Arquivos

### `main.dart`

Ponto de entrada do aplicativo Flutter.

```dart
import 'package:flutter/material.dart';
import 'home_screen.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Jogo da Memória de Trânsito',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: HomeScreen(),
    );
  }
}
```

### `home_screen.dart`

Tela inicial onde o usuário pode selecionar o nível de dificuldade do jogo.

```dart
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'auth_screen.dart';
import 'game_screen.dart';

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  @override
  void initState() {
    super.initState();
    _checkAuth();
  }

  Future<void> _checkAuth() async {
    final prefs = await SharedPreferences.getInstance();
    final email = prefs.getString('email');
    final password = prefs.getString('password');

    if (email != null && password != null) {
      Navigator.of(context).pushReplacement(
        MaterialPageRoute(builder: (_) => GameScreen(difficulty: 'medium')),
      );
    }
  }

  void _startGame(String difficulty) {
    Navigator.of(context).push(
      MaterialPageRoute(builder: (_) => GameScreen(difficulty: difficulty)),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Bem-vindo ao Jogo da Memória de Trânsito')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              child: Text('Fácil'),
              onPressed: () => _startGame('easy'),
            ),
            ElevatedButton(
              child: Text('Médio'),
              onPressed: () => _startGame('medium'),
            ),
            ElevatedButton(
              child: Text('Difícil'),
              onPressed: () => _startGame('hard'),
            ),
          ],
        ),
      ),
    );
  }
}
```

### `auth_screen.dart`

Tela de autenticação para login com email e senha.

```dart
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'home_screen.dart';

class AuthScreen extends StatefulWidget {
  @override
  _AuthScreenState createState() => _AuthScreenState();
}

class _AuthScreenState extends State<AuthScreen> {
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();

  Future<void> _login() async {
    final prefs = await SharedPreferences.getInstance();
    final email = _emailController.text.trim();
    final password = _passwordController.text.trim();

    if (email.isNotEmpty && password.isNotEmpty) {
      prefs.setString('email', email);
      prefs.setString('password', password);
      Navigator.of(context).pushReplacement(
        MaterialPageRoute(builder: (_) => HomeScreen()),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Autenticação')),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _emailController,
              keyboardType: TextInputType.emailAddress,
              decoration: InputDecoration(labelText: 'Email'),
            ),
            TextField(
              controller: _passwordController,
              obscureText: true,
              decoration: InputDecoration(labelText: 'Password'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              child: Text('Login'),
              onPressed: _login,
            ),
          ],
        ),
      ),
    );
  }
}
```

### `game_screen.dart`

Tela do jogo onde o usuário joga o jogo da memória.

```dart
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

class GameScreen extends StatefulWidget {
  final String difficulty;

  GameScreen({required this.difficulty});

  @override
  _GameScreenState createState() => _GameScreenState();
}

class _GameScreenState extends State<GameScreen> {
  List<String> cardImages = [
    'assets/images/sinal1.png',
    'assets/images/sinal2.png',
    'assets/images/sinal3.png',
    'assets/images/sinal4.png',
    // Adicione mais imagens de sinais de trânsito conforme necessário
  ];

  late List<bool> cardFlips;
  int previousIndex = -1;
  int score = 0;
  late int cardCount;

  @override
  void initState() {
    super.initState();
    cardCount = _getCardCount();
    cardImages = cardImages.take(cardCount).toList();
    cardImages.addAll(List<String>.from(cardImages));
    cardImages.shuffle();
    cardFlips = List<bool>.filled(cardImages.length, false);
    _loadScore();
  }

  int _getCardCount() {
    switch (widget.difficulty) {
      case 'easy':
        return 2; // 2 pares de cartas
      case 'medium':
        return 4; // 4 pares de cartas
      case 'hard':
        return 6; // 6 pares de cartas
      default:
        return 4; // Médio por padrão
    }
  }

  Future<void> _loadScore() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      score = prefs.getInt('score') ?? 0;
    });
  }

  Future<void> _saveScore() async {
    final prefs = await SharedPreferences.getInstance();
    prefs.setInt('score', score);
  }

  void _flipCard(int index) {
    setState(() {
      cardFlips[index] = !cardFlips[index];
    });

    if (previousIndex == -1) {
      previousIndex = index;
    } else {
      if (cardImages[previousIndex] != cardImages[index]) {
        Future.delayed(const Duration(milliseconds: 500), () {
          setState(() {
            cardFlips[previousIndex] = false;
            cardFlips[index] = false;
          });
        });
      } else {
        score += 1;
        _saveScore();
      }
      previousIndex = -1;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Jogo da Memória - Pontuação: $score')),
      body: GridView.builder(
        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 2),
        itemCount: cardImages.length,
        itemBuilder: (context, index) {
          return GestureDetector(
            onTap: () => _flipCard(index),
            child: Card(
              child: cardFlips[index]
                  ? Image.asset(cardImages[index])
                  : Container(color: Colors.grey),
            ),
          );
        },
      ),
    );
  }
}
```

## Assets

Coloque as imagens dos sinais de trânsito na pasta `assets/images/` e atualize o arquivo `pubspec.yaml` para incluir esses assets:

```yaml
flutter:
  assets:
    - assets/images/sinal1.png
    - assets/images/sinal2.png
    - assets/images/sinal3.png
    - assets/images/sinal4.png
    # Adicione mais imagens conforme necessário
```

---

Este README foi gerado para ajudar a documentar o projeto e fornecer instruções claras para a instalação, configuração e contribuição. Certifique-se de substituir as informações de contato e o link do projeto conforme necessário.
